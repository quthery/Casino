TOKEN = "6379715678:AAF2Ifbr94Qze--ztz2u6O1Bo6uPlx6dIgU"
import os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import FSInputFile, Message
from get_dice_result import get_result_text
from motor.motor_asyncio import AsyncIOMotorClient

from aiogram import html
import time

cluster = AsyncIOMotorClient("mongodb+srv://quthery:aboba228@cluster0.boxsq6a.mongodb.net/?retryWrites=true&w=majority")
cl = cluster.nineteen.Users

stavki = ['1','2','3','4','5','6','7','8','9','10']
bot = Bot(TOKEN)
dp = Dispatcher()

def get_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.button(text='üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    keyboard.button(text="üí∏–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É")
    keyboard.button(text="üé∞–ò–≥—Ä–∞—Ç—å!")
    keyboard.adjust(2, 1)
    return keyboard.as_markup(resize_keyboard = True)

def get_keyboard1():
    keyboard2 = ReplyKeyboardBuilder()
    keyboard2.button(text='1')
    keyboard2.button(text="2")
    keyboard2.button(text='3')
    keyboard2.button(text='4')
    keyboard2.button(text='5')
    keyboard2.button(text='6')
    keyboard2.button(text='7')
    keyboard2.button(text='8')
    keyboard2.button(text='9')
    keyboard2.button(text='10')
    return keyboard2.as_markup(resize_keyboard = True)



class ChangeBid(StatesGroup):
    new_bid = State()


   

@dp.message(F.text == '/start')
async def handler(message: Message):
  pattern = {
     "_id": message.from_user.id,
     "name": message.from_user.full_name,
     "bid": 5,
     "balance": 1000

  }
  await message.reply(
      f'–ø—Ä–∏–≤–µ—Ç {message.from_user.first_name}! —ç—Ç–æ –∏–≥—Ä–∞ –æ–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ "üé∞–ò–≥—Ä–∞—Ç—å!"',
      reply_markup=get_keyboard()
  )
  cl.insert_one(pattern)


@dp.message(F.text == "üé∞–ò–≥—Ä–∞—Ç—å!")
async def get_game(message: Message):
    result_dice = await message.answer_dice(emoji="üé∞")
    bid = await cl.find_one({'_id': message.from_user.id})
    await asyncio.sleep(0.5)

    points, text_for_gamer = get_result_text(result_dice.dice.value, bid=bid["bid"])
    result_text = f"{text_for_gamer} –í–∞—à–∏ –æ—á–∫–∏: {points}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
    if points < 0:
        # –û—Ç–Ω–∏–º–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await cl.update_one({'_id': message.from_user.id}, {'$inc': {'balance': -bid["bid"]}})
    else:
        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ points –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await cl.update_one({'_id': message.from_user.id}, {'$inc': {'balance': points}})
    
    
    await message.answer(text=result_text, reply_markup=get_keyboard())




@dp.message(Command('bid'))
async def symma(message: Message, command: CommandObject):
    args = command.args

    try:
        args = int(args)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if args > 0:
            await cl.update_one({"_id": message.from_user.id}, {"$set": {"bid": args}})
            await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞: {args}")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=get_keyboard())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=get_keyboard())

@dp.message(F.text == 'üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    user_data = await cl.find_one({'_id': message.from_user.id})
    if user_data:
        

        profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        profile_text += f"üìú ID: {message.from_user.id}\n"
        profile_text += f"üëí –ò–º—è: {message.from_user.full_name}\n"
        profile_text += f"üé∞ –°—Ç–∞–≤–∫–∞: {user_data["bid"]}\n"
        profile_text += f"üíµ –ë–∞–ª–∞–Ω—Å: {int(user_data["balance"])}\n"

        await message.answer(profile_text, reply_markup=get_keyboard())
    else:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_keyboard())


@dp.message(F.text=='üí∏–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É')
async def cmd_bid(message: Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä:1,2,3,4,5,6,7,8,9,10",
        reply_markup=get_keyboard1()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(ChangeBid.new_bid)

@dp.message(ChangeBid.new_bid, F.text.in_(stavki))
async def food_size_chosen(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await cl.update_one({"_id": message.from_user.id}, {"$set": {"bid": int(message.text)}})
    await message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text.lower()} —Å—Ç–∞–≤–∫—É.\n"
             f"–ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!",
             reply_markup=get_keyboard()
      
    )
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()   



if __name__ == '__main__':
  try:
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot, skip_updates=True))
    loop.run_forever()
  except KeyboardInterrupt:
     print("Exit bot")
